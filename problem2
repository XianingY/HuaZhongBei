import pandas as pd
import math
import numpy as np
from scipy.interpolate import interp1d

data1 = pd.read_excel('data.xlsx', sheet_name='Sheet1')
data2 = pd.read_excel('data.xlsx', sheet_name='Sheet2')

# index为距离1月1号的天数
Io = np.zeros(365)
delta = np.zeros(365)
delta_rad = np.zeros(365)

# 每个月的天数列表
days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]

# 四个时间段的白天时长
day_time = [11, 13, 13, 11]
rise_time = [7, 6, 6, 6.5]
set_time = [18, 19, 19, 17.5]

Isc = 1360

for index, row in data2.iterrows():
    month = row['month']
    if 1 <= month <= 12:
        start_day = sum(days_in_month[:month - 1])
        end_day = sum(days_in_month[:month])

        for i in range(start_day, end_day):
            Io[i] = Isc * (1 + 0.034 * math.cos(2 * math.pi * i / 365))
            # delta太阳赤纬角,i没问题
            delta[i] = 23.45 * math.sin(2 * math.pi * (284 + (i + 1)) / 365)

x = data1['time']
y = data1['direct_data']

# 使用线性插值拟合数据
linear_interp = interp1d(x, y)
x_new = np.linspace(x.min(), x.max(), 100)  # 新的连续 x 值
y_linear = linear_interp(x_new)

count = 0
for value in x_new:
    direct_data = linear_interp(value)
    if count == 0:
        max_direct_data = direct_data
    else:
        max_direct_data = max(direct_data, max_direct_data)
    # print(max_direct_data)
    count = count + 1

index_523 = 31 + 28 + 31 + 30 + 23 - 1
# 衰减系数
proportion = max_direct_data / Io[index_523]

disrtibution = np.zeros(100)

count = 0

# 保存value
X_523 = np.zeros(100)

for value in x_new:
    direct_data = linear_interp(value)
    X_523[count] = value
    disrtibution[count] = direct_data / max_direct_data

    count = count + 1

X = np.zeros((365, 100))
Y = np.zeros((365, 100))
Integral = np.zeros(365)

# 遗传算法参数
POP_SIZE = 50
NUM_GENERATIONS = 50
CROSSOVER_RATE = 0.8
MUTATION_RATE = 0.05


# 生成初始种群
def generate_population(pop_size):
    random_col1 = np.random.uniform(-90, 90, size=(pop_size, 1))
    random_col2 = np.random.uniform(0, 90, size=(pop_size, 1))
    return np.hstack((random_col1, random_col2))


# 计算个体适应度
def fitness_function(params):
    garma, theta = params[:, 0], params[:, 1]

    # delta太阳赤纬角
    # omega_h水平面上日落时角
    # omega_s倾斜面上日落时角
    # omega_ss 日出时角
    # omega_sr 日落时角
    # phi太阳能系统的当地维度
    phi = 30.5833
    # T_T太阳时

    # index*1/2+6=T_T
    omega_s = np.zeros(4)
    omega_ss = np.zeros(4)
    omega_sr = np.zeros(4)

    day_time = [11, 13, 13, 11]
    rise_time = [7, 6, 6, 6.5]

    count = 0
    for value in rise_time:
        T_T = value
        if count == 0:
            omega_s[count] = (T_T - 12) * 15 - 9.5
        elif count == 1:
            omega_s[count] = (T_T - 12) * 15 - 5
        elif count == 2:
            omega_s[count] = (T_T - 12) * 15 - 7.25
        elif count == 3:
            omega_s[count] = (T_T - 12) * 15 - 2.25
        count = count + 1

    phi_rad = math.radians(phi)

    garma_rad=np.zeros(50)
    theta_rad = np.zeros(50)
    for i in range(50):
        garma_rad[i] = math.radians(garma[i])
        theta_rad[i] = math.radians(theta[i])
    # 将角度转换为弧度
    for d in range(0, 365):
        delta_rad[d] = math.radians(delta[d])



    a = np.zeros(50)
    b = np.zeros(50)
    c = np.zeros(50)
    D = np.zeros(50)

    for d in range(365):  # d 距离天数
        for i in range(50):
            a[i] = math.sin(delta_rad[d]) * (
                    math.sin(phi_rad) * math.cos(theta_rad[i]) - math.cos(phi_rad) * math.sin(theta_rad[i]) * math.cos(
                garma_rad[i]))
            b[i] = math.cos(delta_rad[d]) * (
                    math.cos(phi_rad) * math.cos(theta_rad[i]) + math.sin(phi_rad) * math.sin(theta_rad[i]) * math.cos(
                garma_rad[i]))
            c[i] = math.cos(delta_rad[d]) * math.sin(theta_rad[i]) * math.sin(garma_rad[i])
            D[i] = math.sqrt(math.pow(b[i], 2) + math.pow(c[i], 2))

            for s in range(0, 4):  # s 季节
                omega_sr[s] = -min(omega_s[s], math.fabs(-math.acos(-a[i] / D[i]) + math.asin(c[i] / D[i])))
                omega_ss[s] = min(omega_s[s], math.acos(-a[i] / D[i]) + math.asin(c[i] / D[i]))

    # 将角度转换为弧度
    omega_s_rad = np.zeros(4)
    omega_sr_rad = np.zeros(4)
    omega_ss_rad = np.zeros(4)

    for s in range(4):
        omega_ss_rad[s] = math.radians(omega_ss[s])
        omega_sr_rad[s] = math.radians(omega_sr[s])
        omega_s_rad[s] = math.radians(omega_s[s])

    Rb = np.zeros((365, 4))
    for d in range(365):
        for s in range(4):
            for i in range(50):
                Rb[d][s] = (math.pi / 180 * (omega_ss_rad[s] - omega_sr_rad[s]) * math.sin(delta_rad[d]) * (
                        math.sin(phi_rad) * math.cos(theta_rad[i]) - math.cos(phi_rad) * math.sin(
                    theta_rad[i]) * math.cos(garma_rad[i])) +
                            math.cos(delta_rad[d]) * (math.sin(omega_ss_rad[s]) - math.sin(omega_sr_rad[s])) * (
                                    math.cos(phi_rad) * math.cos(theta_rad[i]) + math.sin(phi_rad) * math.sin(
                                theta_rad[i]) * math.cos(garma_rad[i])) +
                            (math.cos(omega_ss_rad[s]) - math.cos(omega_sr_rad[s]) * math.cos(delta_rad[d]) * math.sin(
                                theta_rad[i]) * math.sin(garma_rad[i]))) * (1 / (2 * (
                        math.cos(phi_rad) * math.cos(delta_rad[d]) * math.sin(omega_s_rad[s]) + math.pi / 180 *
                        omega_s_rad[s] * math.sin(phi_rad) * math.sin(delta_rad[d]))))/2.2

    max_midday_data = np.zeros(12)
    Sum = np.zeros(365)

    for index, row in data2.iterrows():
        month = row['month']
        if 1 <= month <= 12:
            start_day = sum(days_in_month[:month - 1])
            end_day = sum(days_in_month[:month])

            midday_index = start_day + 14

            max_midday_data[month - 1] = Io[midday_index] * proportion
            for d in range(start_day, end_day):
                for j in range(100):
                    X[d, j] = X_523[j] / day_time[1] * day_time[math.floor((month - 1) / 3)]  # 横向等比扩充
                    Y[d, j] = Io[d] * proportion * disrtibution[j] * 3600 / 1000  # 改单位

                # 使用 trapz() 函数进行数值积分

                Integral[d] = np.trapz(Y[d], X[d])
                Sum += Integral[d] * Rb[d, s]

    fitness_array = np.zeros(len(params))  # 创建适应度数组

    for i in range(len(params)):

        fitness_array[i] = Sum[i]

    return fitness_array


# 选择操作：轮盘赌选择
def selection(population, fitness):
    idx = np.random.choice(range(len(population)), size=len(population), replace=True, p=fitness / fitness.sum())
    return population[idx]


# 交叉操作：单点交叉
def crossover(parent1, parent2):
    if len(parent1) <= 1 or len(parent2) <= 1:
        # 如果父代个体长度太短，无法进行交叉操作，直接返回父代个体
        return parent1, parent2

    if np.random.rand() < CROSSOVER_RATE:
        cross_point = np.random.randint(1, len(parent1))
        child1 = np.concatenate((parent1[:cross_point], parent2[cross_point:]))
        child2 = np.concatenate((parent2[:cross_point], parent1[cross_point:]))
        return child1, child2
    else:
        return parent1, parent2

# 变异操作：单点变异
def mutation(child):
    for i in range(len(child)):
        if np.random.rand() < MUTATION_RATE:
            child[i] += np.random.randn() * 0.5  # 使用高斯变异，均值为0，标准差为0.5
    return child


import pandas as pd
import math
import numpy as np
from scipy.interpolate import interp1d

data1 = pd.read_excel('data.xlsx', sheet_name='Sheet1')
data2 = pd.read_excel('data.xlsx', sheet_name='Sheet2')

# index为距离1月1号的天数
Io = np.zeros(365)
delta = np.zeros(365)
delta_rad = np.zeros(365)

# 每个月的天数列表
days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]

# 四个时间段的白天时长
day_time = [11, 13, 13, 11]
rise_time = [7, 6, 6, 6.5]
set_time = [18, 19, 19, 17.5]

Isc = 1360

for index, row in data2.iterrows():
    month = row['month']
    if 1 <= month <= 12:
        start_day = sum(days_in_month[:month - 1])
        end_day = sum(days_in_month[:month])

        for i in range(start_day, end_day):
            Io[i] = Isc * (1 + 0.034 * math.cos(2 * math.pi * i / 365))
            # delta太阳赤纬角,i没问题
            delta[i] = 23.45 * math.sin(2 * math.pi * (284 + (i + 1)) / 365)

x = data1['time']
y = data1['direct_data']

# 使用线性插值拟合数据
linear_interp = interp1d(x, y)
x_new = np.linspace(x.min(), x.max(), 100)  # 新的连续 x 值
y_linear = linear_interp(x_new)

count = 0
for value in x_new:
    direct_data = linear_interp(value)
    if count == 0:
        max_direct_data = direct_data
    else:
        max_direct_data = max(direct_data, max_direct_data)
    # print(max_direct_data)
    count = count + 1

index_523 = 31 + 28 + 31 + 30 + 23 - 1
# 衰减系数
proportion = max_direct_data / Io[index_523]

disrtibution = np.zeros(100)

count = 0

# 保存value
X_523 = np.zeros(100)

for value in x_new:
    direct_data = linear_interp(value)
    X_523[count] = value
    disrtibution[count] = direct_data / max_direct_data

    count = count + 1

X = np.zeros((365, 100))
Y = np.zeros((365, 100))
Integral = np.zeros(365)

# 遗传算法参数
POP_SIZE = 50
NUM_GENERATIONS = 50
CROSSOVER_RATE = 0.8
MUTATION_RATE = 0.05


# 生成初始种群
def generate_population(pop_size):
    random_col1 = np.random.uniform(-90, 90, size=(pop_size, 1))
    random_col2 = np.random.uniform(0, 90, size=(pop_size, 1))
    return np.hstack((random_col1, random_col2))


# 计算个体适应度
def fitness_function(params):
    garma, theta = params[:, 0], params[:, 1]

    # delta太阳赤纬角
    # omega_h水平面上日落时角
    # omega_s倾斜面上日落时角
    # omega_ss 日出时角
    # omega_sr 日落时角
    # phi太阳能系统的当地维度
    phi = 30.5833
    # T_T太阳时

    # index*1/2+6=T_T
    omega_s = np.zeros(4)
    omega_ss = np.zeros(4)
    omega_sr = np.zeros(4)

    day_time = [11, 13, 13, 11]
    rise_time = [7, 6, 6, 6.5]

    count = 0
    for value in rise_time:
        T_T = value
        if count == 0:
            omega_s[count] = (T_T - 12) * 15 - 9.5
        elif count == 1:
            omega_s[count] = (T_T - 12) * 15 - 5
        elif count == 2:
            omega_s[count] = (T_T - 12) * 15 - 7.25
        elif count == 3:
            omega_s[count] = (T_T - 12) * 15 - 2.25
        count = count + 1

    phi_rad = math.radians(phi)

    garma_rad=np.zeros(50)
    theta_rad = np.zeros(50)
    for i in range(50):
        garma_rad[i] = math.radians(garma[i])
        theta_rad[i] = math.radians(theta[i])
    # 将角度转换为弧度
    for d in range(0, 365):
        delta_rad[d] = math.radians(delta[d])



    a = np.zeros(50)
    b = np.zeros(50)
    c = np.zeros(50)
    D = np.zeros(50)

    for d in range(365):  # d 距离天数
        for i in range(50):
            a[i] = math.sin(delta_rad[d]) * (
                    math.sin(phi_rad) * math.cos(theta_rad[i]) - math.cos(phi_rad) * math.sin(theta_rad[i]) * math.cos(
                garma_rad[i]))
            b[i] = math.cos(delta_rad[d]) * (
                    math.cos(phi_rad) * math.cos(theta_rad[i]) + math.sin(phi_rad) * math.sin(theta_rad[i]) * math.cos(
                garma_rad[i]))
            c[i] = math.cos(delta_rad[d]) * math.sin(theta_rad[i]) * math.sin(garma_rad[i])
            D[i] = math.sqrt(math.pow(b[i], 2) + math.pow(c[i], 2))

            for s in range(0, 4):  # s 季节
                omega_sr[s] = -min(omega_s[s], math.fabs(-math.acos(-a[i] / D[i]) + math.asin(c[i] / D[i])))
                omega_ss[s] = min(omega_s[s], math.acos(-a[i] / D[i]) + math.asin(c[i] / D[i]))

    # 将角度转换为弧度
    omega_s_rad = np.zeros(4)
    omega_sr_rad = np.zeros(4)
    omega_ss_rad = np.zeros(4)

    for s in range(4):
        omega_ss_rad[s] = math.radians(omega_ss[s])
        omega_sr_rad[s] = math.radians(omega_sr[s])
        omega_s_rad[s] = math.radians(omega_s[s])

    Rb = np.zeros((365, 4))
    for d in range(365):
        for s in range(4):
            for i in range(50):
                Rb[d][s] = (math.pi / 180 * (omega_ss_rad[s] - omega_sr_rad[s]) * math.sin(delta_rad[d]) * (
                        math.sin(phi_rad) * math.cos(theta_rad[i]) - math.cos(phi_rad) * math.sin(
                    theta_rad[i]) * math.cos(garma_rad[i])) +
                            math.cos(delta_rad[d]) * (math.sin(omega_ss_rad[s]) - math.sin(omega_sr_rad[s])) * (
                                    math.cos(phi_rad) * math.cos(theta_rad[i]) + math.sin(phi_rad) * math.sin(
                                theta_rad[i]) * math.cos(garma_rad[i])) +
                            (math.cos(omega_ss_rad[s]) - math.cos(omega_sr_rad[s]) * math.cos(delta_rad[d]) * math.sin(
                                theta_rad[i]) * math.sin(garma_rad[i]))) * (1 / (2 * (
                        math.cos(phi_rad) * math.cos(delta_rad[d]) * math.sin(omega_s_rad[s]) + math.pi / 180 *
                        omega_s_rad[s] * math.sin(phi_rad) * math.sin(delta_rad[d]))))/2.1

    max_midday_data = np.zeros(12)
    Sum = np.zeros(365)

    for index, row in data2.iterrows():
        month = row['month']
        if 1 <= month <= 12:
            start_day = sum(days_in_month[:month - 1])
            end_day = sum(days_in_month[:month])

            midday_index = start_day + 14

            max_midday_data[month - 1] = Io[midday_index] * proportion
            for d in range(start_day, end_day):
                for j in range(100):
                    X[d, j] = X_523[j] / day_time[1] * day_time[math.floor((month - 1) / 3)]  # 横向等比扩充
                    Y[d, j] = Io[d] * proportion * disrtibution[j] * 3600 / 1000  # 改单位

                # 使用 trapz() 函数进行数值积分

                Integral[d] = np.trapz(Y[d], X[d])
                Sum += Integral[d] * Rb[d, s]

    fitness_array = np.zeros(len(params))  # 创建适应度数组

    for i in range(len(params)):

        fitness_array[i] = Sum[i]

    return fitness_array


# 选择操作：轮盘赌选择
def selection(population, fitness):
    idx = np.random.choice(range(len(population)), size=len(population), replace=True, p=fitness / fitness.sum())
    return population[idx]


# 交叉操作：单点交叉
def crossover(parent1, parent2):
    if len(parent1) <= 1 or len(parent2) <= 1:
        # 如果父代个体长度太短，无法进行交叉操作，直接返回父代个体
        return parent1, parent2

    if np.random.rand() < CROSSOVER_RATE:
        cross_point = np.random.randint(1, len(parent1))
        child1 = np.concatenate((parent1[:cross_point], parent2[cross_point:]))
        child2 = np.concatenate((parent2[:cross_point], parent1[cross_point:]))
        return child1, child2
    else:
        return parent1, parent2

# 变异操作：单点变异
def mutation(child):
    for i in range(len(child)):
        if np.random.rand() < MUTATION_RATE:
            child[i] += np.random.randn() * 0.5  # 使用高斯变异，均值为0，标准差为0.5
    return child



# 主程序
def genetic_algorithm(pop_size, num_generations, output_file):
    population = generate_population(pop_size)
    best_individual = None
    best_fitness = float('-inf')  # 初始化为负无穷
    results = []

    for generation in range(num_generations):
        fitness = fitness_function(population)
        selected_population = selection(population, fitness)
        next_population = []

        for i in range(pop_size // 2):
            parent1, parent2 = selected_population[np.random.randint(len(selected_population), size=2)]
            child1, child2 = crossover(parent1, parent2)
            child1 = mutation(child1)
            child2 = mutation(child2)
            next_population.extend([child1, child2])

        population = np.array(next_population)

        # 获取当前代的最佳个体
        current_best_individual = population[np.argmax(fitness)]
        current_best_fitness = fitness.max()

        # 更新历史最佳个体和适应度
        if current_best_fitness > best_fitness:
            best_individual = current_best_individual
            best_fitness = current_best_fitness

        print(f"Generation {generation + 1}: Best Fitness = {best_fitness}，Day Everage = {best_fitness/365}")

        # 记录整个群体的参数
        for individual in population:
            garma, theta = individual[0], individual[1]
            results.append([generation + 1, garma, theta])

    # 将结果保存到Excel文件
    df = pd.DataFrame(results, columns=['Generation', 'Garma', 'Theta'])
    df.to_excel(output_file, index=False)

    return best_individual

# 运行遗传算法并将结果保存到文件2.xlsx
output_filename = '2.xlsx'  # 定义输出文件名
best_params = genetic_algorithm(POP_SIZE, NUM_GENERATIONS, output_filename)
best_garma, best_theta = best_params[0], best_params[1]
print(f"Best Parameters: Garma = {best_garma}, Theta = {best_theta}")
